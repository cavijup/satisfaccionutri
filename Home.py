import streamlit as st
import pandas as pd
# Eliminar 'get_filtered_data' de la importaci칩n
from utils.data_loader import load_data
from utils.data_processing import (
    plot_satisfaction_by_category,
    identify_problem_areas,
    get_satisfaction_columns
)
import time

# Configuraci칩n de la p치gina
st.set_page_config(
    page_title="Dashboard Encuesta Satisfacci칩n",
    page_icon="游늵",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T칤tulo y descripci칩n
st.title("Dashboard de An치lisis - Encuesta de Satisfacci칩n de Entrega de Mercados")
st.markdown("""
Este dashboard presenta el an치lisis de **todas** las encuestas de satisfacci칩n recopiladas
del proceso de entrega de mercados a comedores comunitarios, permitiendo identificar
치reas de mejora y fortalezas generales del programa.

Navegue entre las pesta침as de la barra lateral para explorar distintos aspectos de los datos.
""")

# --- Carga de Datos ---
@st.cache_data(show_spinner="Cargando datos de Google Sheets...") # A침adir spinner aqu칤
def get_data():
    df = load_data()
    return df

df = get_data() # Usar 'df' directamente como nombre del DataFrame principal

if df is None or df.empty:
    st.error("Home.py: No se pudieron cargar los datos iniciales desde load_data(). La aplicaci칩n no puede continuar.")
    st.stop()
else:
    st.success(f"Datos cargados. Total de registros: {len(df)}")

# --- Barra Lateral (Sin Filtros) ---
st.sidebar.title("Navegaci칩n")
st.sidebar.info("Seleccione una secci칩n para ver el an치lisis detallado.")
st.sidebar.metric("Total de encuestas analizadas", len(df)) # Mostrar total de registros

# Bot칩n para refrescar datos
if st.sidebar.button("Refrescar Datos"):
    st.cache_data.clear() # Limpiar cach칠 de load_data
    st.rerun()

# --- Contenido Principal (Siempre se muestra ya que no hay filtros) ---

print(f"INFO Home.py: Mostrando contenido principal con {len(df)} filas (sin filtros).")

# --- M칠tricas Generales ---
st.header("M칠tricas Generales (Globales)")

# Calcular m칠tricas usando el df completo
satisfaction_cols = get_satisfaction_columns(df) # Usar el df completo
overall_satisfaction = None
plazos_cumplidos = None
proceso_sencillo = None

if satisfaction_cols:
    all_means = []
    for col in satisfaction_cols:
         numeric_col = pd.to_numeric(df[col], errors='coerce')
         if numeric_col.notna().any():
              all_means.append(numeric_col.mean())
    if all_means:
         overall_satisfaction = sum(all_means) / len(all_means)

if '29plazos_entrega_mercados' in df.columns:
    plazos_series = df['29plazos_entrega_mercados'].dropna().astype(str).str.strip().str.lower()
    if len(plazos_series) > 0:
        plazos_cumplidos = (plazos_series == 's칤').mean() * 100

if '31pasos_recepcion_mercado' in df.columns:
    proceso_series = df['31pasos_recepcion_mercado'].dropna().astype(str).str.strip().str.lower()
    if len(proceso_series) > 0:
        proceso_sencillo = (proceso_series == 'sencillo').mean() * 100

# Mostrar m칠tricas en columnas
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Satisfacci칩n General", f"{overall_satisfaction:.2f}/5" if overall_satisfaction is not None else "N/A")
with col2:
    st.metric("Cumplimiento de Plazos", f"{plazos_cumplidos:.1f}%" if plazos_cumplidos is not None else "N/A")
with col3:
    st.metric("Proceso Sencillo", f"{proceso_sencillo:.1f}%" if proceso_sencillo is not None else "N/A")

# --- 츼reas problem치ticas ---
st.subheader("Aspectos con Menor Satisfacci칩n (Global)")
try:
    problem_areas = identify_problem_areas(df) # Usar el df completo
    if not problem_areas.empty:
        problem_areas['Satisfacci칩n Media'] = problem_areas['Satisfacci칩n Media'].map('{:.2f}'.format)
        st.dataframe(problem_areas, use_container_width=True, hide_index=True)
    else:
        st.info("No se pudieron calcular las 치reas problem치ticas.")
except Exception as e_problem:
    st.error(f"Error al identificar 치reas problem치ticas: {e_problem}")
    print(f"ERROR Home.py - identify_problem_areas: {e_problem}")


# --- Gr치ficos principales ---
st.header("Satisfacci칩n Promedio por Categor칤a (Global)")
try:
    satisfaction_fig = plot_satisfaction_by_category(df) # Usar el df completo
    if satisfaction_fig:
        st.plotly_chart(satisfaction_fig, use_container_width=True)
    # else: # La funci칩n ahora devuelve una figura vac칤a si no hay datos
    #    st.info("No se pudo crear el gr치fico de satisfacci칩n por categor칤a.")
except Exception as e_plot_cat:
    st.error(f"Error al generar gr치fico por categor칤a: {e_plot_cat}")
    print(f"ERROR Home.py - plot_satisfaction_by_category: {e_plot_cat}")


# --- Secciones fijas ---
st.header("Navegaci칩n por el Dashboard")
st.markdown("""
Utilice la barra lateral izquierda para navegar a las distintas secciones del dashboard:

1.  **Abarrotes**: An치lisis detallado de la satisfacci칩n con abarrotes.
2.  **C치rnicos y Huevos**: An치lisis de la satisfacci칩n con carnes y huevos.
3.  **Frutas y Verduras**: An치lisis de la satisfacci칩n con frutas, verduras, hortalizas y tub칠rculos.
4.  **Proceso de Entrega**: Evaluaci칩n del proceso de entrega, tiempos y atenci칩n.
5.  **An치lisis Geogr치fico**: Comparativa de satisfacci칩n por ubicaci칩n geogr치fica.

Cada secci칩n contiene gr치ficos interactivos y an치lisis detallados **sobre el total de los datos**.
""")

# Instrucciones de uso
with st.expander("Instrucciones de Uso"):
    st.markdown("""
    ## C칩mo utilizar este dashboard

    1.  **Navegaci칩n**: Haga clic en las opciones de la barra lateral para explorar an치lisis detallados por categor칤a o geograf칤a.
    2.  **M칠tricas Generales**: Vea un resumen de la satisfacci칩n general y otros indicadores clave basados en todos los datos.
    3.  **Refrescar Datos**: Si cree que los datos en Google Sheets han cambiado recientemente, use el bot칩n "Refrescar Datos" para forzar una recarga desde la fuente (esto puede tomar unos segundos).

    Para obtener m치s detalles sobre cualquier gr치fico, puede pasar el cursor sobre los elementos visuales.
    """)

# Footer
st.markdown("---")
st.markdown(f"Dashboard de An치lisis de Encuestas - {time.strftime('%Y-%m-%d %H:%M:%S')}")